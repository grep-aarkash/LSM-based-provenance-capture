Lessons which I learned during the course of the project:

1. Don't work all alone on a project. Despite having an option of having worked
with one of the groups, I chose to work on my own. My viewpoint was if I do a 
project alone, I will do all the parts on my own. In that process I will learn
a lot. 

2. Things operate very differently when working as a part of a huge established
project as compared to my thesis research work which I am building from ground
up and starting from scratch.
	1. The project expected me to do one simple task, which was running call	graphs. After discussing with other students, I constantly kept shifting 	my goal. Again, I feel this is my fault. I should have focused on A and 	B instead of trying to do C, D, E or F. 
	
3. During writing the paper, I wanted to be 'completely original'. Hence, instead of explaining the architecture in the beginning in the entire paper I keep trying to show why this work is different without giving any motivaion or background. 

4. Again with respect to writing, I did spend a lot of time on the first draft. But I spent my time on the wrong part. Instead of building one prototype and iteratively improving upon it. I spent too much time planning in my head. 

5. Before writing, prepare an outline. The outline will most probably change after the final draft. But it helps you start.

6. You don't have to follow a standard heading pattern of introduction, background etc. What I mean to say is that you don't need to put a seperate background section. We can construct it as we are preparing our story. 

7. Writing horizontall is what makes a bad paper. In my previous attempt, after reading the comments, I realized that my readers were unable to understand what Camflow is. Everyone had their own viewpoint as to how it must be operating. This is what made things a little vague.

8. The scope of the project was too huge according to me. In order to perform
static analysis, it's important to know how the system works. Blindly using tools
is not very helpful. In case of dynamic analysis, it's a different case. Using
static analysersm, it's very important to understand the code flow. In this case
it was the linux kernel.

9. Linux kernel is huge. It took me around 7 whole days to get familiar with
the code base and understand what goes where. 

10. 

